/*

Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge uv, vertex u comes before v in the ordering. Topological Sorting for a graph is not possible if the graph is not a DAG.


Solution Algorithm Approach:-

The idea here is to approach with little modified version of dfs.

In DFS, we start from a vertex, we first print it and then recursively call DFS for its adjacent vertices. In topological sorting, we use a temporary stack. We donâ€™t print the vertex immediately, we first recursively call topological sorting for all its adjacent vertices, then push it to a stack. Finally, print contents of stack.

*/


// A Java program to print topological sorting of a DAG  
import java.io.*;  
import java.util.*;  
    

public class Graph  
{  
    private int V;   
    
    private ArrayList<ArrayList<Integer>> adj;  
      
    Graph(int v)  
    {  
        V = v;  
        adj = new ArrayList<ArrayList<Integer>>(v);  
        for (int i=0; i<v; ++i)  
            adj.add(new ArrayList<Integer>());  
    }  
    
    void addEdge(int v,int w) { adj.get(v).add(w); }  
    
    void dfs(int v, boolean visited[],Stack<Integer> stack)  
    {  
        
        visited[v] = true;  
        
        //Traversing using Iterator        
        
        Integer i;  
        
        Iterator<Integer> it = adj.get(v).iterator();  
        while (it.hasNext())  
        {  
            i = it.next();  
            if (!visited[i])  
                dfs(i, visited, stack);  
        }  
    
        //pushing into the stack when all of v's list items are visited
        stack.push(new Integer(v));  
    }  
    
    
    void topologicalSort()  
    {  
        Stack<Integer> stack = new Stack<Integer>();  
    
        boolean visited[] = new boolean[V];
    
        for (int i = 0; i < V; i++)  
            if (visited[i] == false)  
                dfs(i, visited, stack);  
    
        while (stack.empty()==false)  
            System.out.print(stack.pop() + " ");  
    }  
    
   
    public static void main(String args[])  
    {  
       
        Graph g = new Graph(6);  
        g.addEdge(5, 2);  
        g.addEdge(5, 0);  
        g.addEdge(4, 0);  
        g.addEdge(4, 1);  
        g.addEdge(2, 3);  
        g.addEdge(3, 1);  
    
        System.out.println("Following is a Topological " +  
                           "sort of the given graph");  
        g.topologicalSort();  
    }  
}  
